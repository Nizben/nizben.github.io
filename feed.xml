<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://nizben.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://nizben.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-03-07T13:17:25+00:00</updated><id>https://nizben.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Introduction to MCMC methods: From importance sampling to advanced algorithms</title><link href="https://nizben.github.io/blog/2024/mcmc/" rel="alternate" type="text/html" title="Introduction to MCMC methods: From importance sampling to advanced algorithms"/><published>2024-08-28T00:00:00+00:00</published><updated>2024-08-28T00:00:00+00:00</updated><id>https://nizben.github.io/blog/2024/mcmc</id><content type="html" xml:base="https://nizben.github.io/blog/2024/mcmc/"><![CDATA[<h2 id="1-introduction">1. Introduction</h2> <p>This post (or rather a collection of notes) is an attempt to go through different concepts around <strong>MCMC methods</strong> from the ground up. I will be trying to gather and structure my learnings around this topic in a way that is clear, intelligible, and beginner friendly.</p> <p>Sampling from complex, high-dimensional probability distributions is a fundamental challenge in statistics, machine learning, and many applied fields. The core idea is that Markov Chain Monte Carlo (MCMC) methods overcome this challenge by constructing a Markov chain whose stationary distribution is the target distribution.</p> <p>In practice, MCMC is used for Bayesian inference, uncertainty quantification, and solving inverse problems in areas such as audio and image processing. This blogpost proposes an accessible introduction to MCMC methods from its theoretical foundations to some Python implementations of these algorithms for real world use cases.</p> <h2 id="2-theoretical-foundations">2. Theoretical Foundations</h2> <h3 id="21-markov-chains-and-stationarity">2.1. Markov Chains and Stationarity</h3> <p>A <strong>Markov chain</strong> is a sequence of random variables ${X_t}_{t \geq 0}$ that satisfies the Markov property:</p> \[P(X_{t+1} = y \mid X_t = x, X_{t-1} = x_{t-1}, \dots) = P(X_{t+1}=y \mid X_t=x).\] <p>The chain’s dynamics are defined by a <strong>transition probability</strong> $P(x,y)$ (or kernel) that is time-independent.</p> <p>A probability distribution $\pi(x)$ is said to be <strong>stationary</strong> (or invariant) if, for all states $y$,</p> \[\pi(y) = \sum_{x} \pi(x) P(x, y)\] <p>This means that if : $X_0 \sim \pi, \text{ then } X_t \sim \pi \text{ for every } t.$</p> <h3 id="22-detailed-balance-and-invariance">2.2. Detailed Balance and Invariance</h3> <p>A sufficient condition for stationarity is the <strong>detailed balance condition</strong>:</p> \[\pi(x) P(x, y) = \pi(y) P(y, x), \quad \forall x, y\] <p><strong>Proof Sketch:</strong></p> <ol> <li><strong>Assume detailed balance:</strong> For every pair $(x,y)$:</li> </ol> \[\pi(x) P(x, y) = \pi(y) P(y, x)\] <ol> <li><strong>Sum over all $x$ for a fixed $y$:</strong></li> </ol> \[\sum_{x} \pi(x) P(x, y) = \sum_{x} \pi(y) P(y, x) = \pi(y) \sum_{x} P(y, x)\] <ol> <li><strong>Normalization:</strong> Since $\sum_{x} P(y, x) = 1$, we obtain:</li> </ol> \[\sum_{x} \pi(x) P(x, y) = \pi(y)\] <p>Thus, detailed balance guarantees that $\pi$ is invariant under the chain dynamics.</p> <h3 id="23-convergence-and-ergodicity">2.3. Convergence and Ergodicity</h3> <p>For the empirical averages from the chain to converge to expectations under $\pi$, the chain must be:</p> <ul> <li><strong>Irreducible:</strong> Every state can be reached from any other state.</li> <li><strong>Aperiodic:</strong> The chain does not get trapped in cycles.</li> <li><strong>Positive Recurrent:</strong> The expected return time to any state is finite.</li> </ul> <p>If these conditions hold, the <strong>ergodic theorem</strong> asserts that for any integrable function $f$:</p> \[\frac{1}{N}\sum_{t=1}^{N} f(X_t) \longrightarrow \mathbb{E}_{\pi}[f(x)]\] <p>as $N \to \infty$.</p> <p>This is the foundation behind using MCMC to approximate integrals and expectations.</p> <h2 id="3-mcmc-algorithms">3. MCMC Algorithms</h2> <p>Below are several common MCMC algorithms with some theroretical details, context, and pseudocode.</p> <h3 id="31-importance-sampling">3.1. Importance Sampling</h3> <p><strong>Context &amp; Objective:</strong></p> <p>Often, our goal is to compute expectations under a complex target distribution $\pi(x)$. For example, we may wish to evaluate:</p> \[I = \int f(x)\pi(x)\,dx\] <p>When direct sampling from $\pi(x)$ is infeasible, we introduce a proposal (or importance) distribution $q(x)$ that is easier to sample from.</p> <p><strong>Theory &amp; Formulation:</strong></p> <p>Given samples $x_1, x_2, \dots, x_N$ drawn from $q(x)$, the expectation is estimated as:</p> \[I\approx \frac{\sum_{i=1}^{N} f(x_i) w(x_i)}{\sum_{i=1}^{N} w(x_i)},\] <p>with importance weights defined by:</p> \[w(x) = \frac{\pi(x)}{q(x)}\] <p><em>Key Considerations:</em></p> <ul> <li><strong>Choice of $q(x):q(x)$</strong> must have heavier tails than $\pi(x)$ to avoid extremely high weights.</li> <li><strong>Variance:</strong> A poor choice of $q(x)$ leads to high variance in estimates.</li> </ul> <p><strong>Pseudocode:</strong></p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>For i = 1 to N:
    Sample x_i ~ q(x)
    Compute weight w_i = π(x_i) / q(x_i)
Estimate I ≈ (Σ f(x_i) w_i) / (Σ w_i)
</code></pre></div></div> <h3 id="32-metropolishastings-mh">3.2. Metropolis–Hastings (MH)</h3> <p><strong>Context &amp; Objective:</strong></p> <table> <tbody> <tr> <td>MH constructs a Markov chain whose stationary distribution is $\pi(x)$. It proposes moves using a proposal density $q(x’</td> <td>x)$ and accepts these moves with a carefully designed acceptance probability.</td> </tr> </tbody> </table> <p>The key idea is to design the transition probability $P(x \to x’)$ so that the target distribution is invariant. A sufficient condition is <strong>detailed balance</strong>, which states that for all states $x$ and $x’$:</p> <p>$\pi(x) P(x \to x’) = \pi(x’) P(x’ \to x)$</p> <p>In MH, the transition probability is given by:</p> \[P(x \to x') = q(x'|x) \alpha(x, x')\] <p>where $\alpha(x, x’)$ is the acceptance probability. To satisfy detailed balance, we require:</p> \[\pi(x) q(x'|x) \alpha(x, x') = \pi(x') q(x|x') \alpha(x', x)\] <p>A common and effective choice is to define $\alpha(x, x’)$ as:</p> \[\alpha(x, x') = \min\left\{1, \frac{\pi(x') \, q(x|x')}{\pi(x) \, q(x'|x)}\right\}\] <table> <tbody> <tr> <td>When $$\pi(x’) q(x</td> <td>x’) \geq \pi(x) q(x’</td> <td>x)$$, we have $\alpha(x, x’) = 1$; otherwise, the move is accepted</td> </tr> </tbody> </table> <p>with probability</p> <table> <tbody> <tr> <td>$$\frac{\pi(x’) \, q(x</td> <td>x’)}{\pi(x) \, q(x’</td> <td>x)}$$.</td> </tr> </tbody> </table> <p><strong>Convergence and ergodicity</strong></p> <p>The MH algorithm constructs a Markov chain that, under suitable conditions (irreducibility, aperiodicity, and positive recurrence), converges to the target distribution $\pi(x)$. The ergodic theorem then guarantees that time averages computed from the chain will converge to the expectations under $\pi(x)$:</p> \[\frac{1}{N}\sum_{t=1}^{N} f(x_t) \longrightarrow \mathbb{E}_{\pi}[f(x)] \quad \text{as } N \to \infty\] <p><strong>Practical considerations</strong></p> <ul> <li> <table> <tbody> <tr> <td>**Choice of Proposal $q(x’</td> <td>x)$ :** The efficiency of the MH algorithm heavily depends on how well the proposal distribution explores the state space. If $q(x’</td> <td>x)$ is too narrow, the chain will explore slowly, if too wide, the acceptance rate may drop.</td> </tr> </tbody> </table> </li> <li> <table> <tbody> <tr> <td><strong>Symmetric Proposals:</strong> When $q(x’</td> <td>x) = q(x</td> <td>x’)$ (as in a Gaussian random walk), the acceptance probability simplifies to:</td> </tr> </tbody> </table> \[\alpha(x, x') = \min\left\{1, \frac{\pi(x')}{\pi(x)}\right\}\] </li> </ul> <p><strong>Algorithm &amp; Pseudocode:</strong></p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Initialize x₀
For t = 0 to N - 1:
    Propose x' ~ q(x'|x_t)
    Calculate acceptance probability:
        α = min{1, [π(x') q(x_t|x')] / [π(x_t) q(x'|x_t)] }
    With probability α:
        Set x_(t+1) = x'
    Else:
        Set x_(t+1) = x_t
</code></pre></div></div> <h3 id="33-gibbs-sampling">3.3. Gibbs Sampling</h3> <p><strong>Context &amp; Objective:</strong></p> <p>Gibbs sampling is a special case of the Metropolis–Hastings algorithm, optimized for high-dimensional problems where the joint distribution $\pi(x)$ is difficult to sample from directly, but the full conditional distributions $π(x_i∣x_{−i})$ (where $x_{-i}$ denotes all components except $x_i$) are tractable.</p> <p>Suppose $x = (x_1, x_2, \dots, x_d)$ is a $d$-dimensional vector. The Gibbs sampler iterates over each coordinate and updates it by sampling from the full conditional distribution:</p> \[x_i^{(t+1)} \sim \pi\left(x_i \mid x_1^{(t+1)}, \dots, x_{i-1}^{(t+1)}, x_{i+1}^{(t)}, \dots, x_d^{(t)}\right)\] <p>Since each update is drawn exactly from the full conditional, the move is automatically accepted. The chain is constructed to have $\pi(x)$ as its stationary distribution.</p> <p><strong>Theoretical details:</strong></p> <ul> <li><strong>Consistency of conditionals:</strong> For Gibbs sampling to work, the set of full conditionals must be consistent with a joint distribution $\pi(x)$. Under this condition, if the chain is run long enough the joint ditribution of the samples converges to $\pi(x)$.</li> <li><strong>Detailed balance in Gibbs sampling:</strong> Although Gibbs sampling does not require an explicit acceptance step, one can show that it satisfies detailed balance. For two states $x$ and $x’$ that differ only in the $i$-th coordinate, the update coordinate is given by the full conditional:</li> </ul> \[P(x→x′)=π(x'_{i}∣x_{−i})\] <p>It can be verified by:</p> \[π(x)π(x'_i∣x_{−i})=π(x')\] <p>which is consistent with the detailed balance requirement.</p> <p><strong>Practical considerations:</strong></p> <ul> <li><strong>Consistency of Conditionals:</strong> For Gibbs sampling to work, the set of full conditionals must be consistent with a joint distribution $\pi(x)$. Under this condition, if the chain is run long enough, the joint distribution of the samples converges to $\pi(x)$.</li> <li> <p><strong>Detailed Balance in Gibbs Sampling:</strong> Although Gibbs sampling does not require an explicit acceptance step, one can show that it satisfies detailed balance. For two states $x$ and $x’$ that differ only in the $i$-th coordinate, the update probability is given by the full conditional:</p> <p>$P(x \to x’) = \pi\left(x_i’ \mid x_{-i}\right)$ It can be verified that:</p> <p>$\pi(x) \pi\left(x_i’ \mid x_{-i}\right) = \pi(x’)$ which is consistent with the detailed balance requirement.</p> </li> </ul> <p><strong>Convergence and ergodicity:</strong></p> <p>Gibbs sampling inherits the convergence properties of Markov chains. Provided that the chain is irreducible and aperiodic (often ensured by the structure of the conditional distributions), the Gibbs sampler is ergodic, meaning that the empirical averages converge to the true expectations under $\pi(x)$.</p> <p><strong>Practical considerations:</strong></p> <ul> <li><strong>Blocking:</strong> In practice, it might be beneficial to update groups of variables together (blocked Gibbs sampling) when they are strongly correlated.</li> <li><strong>Mixing:</strong> The rate at which the Gibbs sampler explores the state space (its mixing time) can be slow if the variables are highly correlated. In such cases, combining Gibbs updates with other moves (or using reparameterizations) may improve performance.</li> <li><strong>Implementation:</strong> Gibbs sampling is particularly attractive when full conditionals are available in closed form (e.g., in many Bayesian hierarchical models).</li> </ul> <p><strong>Pseudocode:</strong></p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Initialize x = (x₁, x₂, …, x_d)
For t = 0 to N - 1:
    For i = 1 to d:
        Sample x_i^(t+1) ~ π(x_i | x₁^(t+1), …, x_(i-1)^(t+1), x_(i+1)^(t), …, x
        d^(t))
</code></pre></div></div> <h3 id="34-hamiltonian-monte-carlo-hmc">3.4. Hamiltonian Monte Carlo (HMC)</h3> <p><strong>Context &amp; Objective:</strong></p> <p>HMC is based on the Hamiltonian function:</p> \[H(x, p) = U(x) + K(p)\] <p>where:</p> <ul> <li>$U(x) = -\log \pi(x)$ is the <strong>potential energy</strong> (derived from the target density $\pi(x)$.</li> <li>$K(p) = \frac{1}{2}p^\top M^{-1}p$ is the <strong>kinetic energy</strong>, typically assuming $p \sim \mathcal{N}(0, M)$ with mass matrix $M$.</li> </ul> <p>Hamilton’s equations describe the evolution of $x$ and $p$:</p> <p>$\frac{dx}{dt} = \nabla_p H(x, p) = M^{-1}p, \qquad \frac{dp}{dt} = -\nabla_x H(x, p) = -\nabla U(x)$</p> <p><strong>Leapfrog integrator</strong></p> <p>In practice, Hamilton’s equations are solved numerically using the leapfrog integrator, which is chosen for its symplectic (volume-preserving) and time-reversible properties. The leapfrog update is performed in three steps:</p> <ol> <li><strong>Half-step momentum update:</strong></li> </ol> <p>$p\left(t + \frac{\epsilon}{2}\right) = p(t) - \frac{\epsilon}{2}\nabla U(x(t))$</p> <ol> <li><strong>Full-step position update:</strong></li> </ol> <p>$x(t + \epsilon) = x(t) + \epsilon\, M^{-1} p\left(t + \frac{\epsilon}{2}\right)$</p> <ol> <li><strong>Half-step momentum update:</strong></li> </ol> <p>$p(t + \epsilon) = p\left(t + \frac{\epsilon}{2}\right) - \frac{\epsilon}{2}\nabla U(x(t + \epsilon))$</p> <p>Repeating these steps for $L$ iterations produces a proposal $(x^<em>, p^</em>)$.</p> <p>Because numerical integration introduces discretization errors, HMC employs a Metropolis acceptance step to correct for these errors. The acceptance probability is given by:</p> \[\alpha = \min\left\{1, \exp\Big[-H(x^*, p^*) + H(x, p)\Big]\right\}\] <p>This step ensures that the overall transition kernel satisfies detailed balance with respect to the augmented target distribution $\pi(x) \, \mathcal{N}(p;0,M)$.</p> <p><strong>Convergence and efficiency:</strong></p> <ul> <li><strong>Reduction of Random Walk Behavior:</strong> HMC can make large moves in state space while maintaining a high acceptance rate, thereby reducing autocorrelation.</li> <li><strong>Tuning Parameters:</strong> The step size $\epsilon$ and the number of leapfrog steps $L$ must be carefully tuned. Too large a step size or too many steps can result in low acceptance probabilities, while too small values may result in inefficient exploration.</li> <li><strong>Theoretical Guarantees:</strong> Under proper conditions (e.g. the leapfrog integrator’s error is bounded and the chain is irreducible and aperiodic), HMC is ergodic and converges to the target distribution.</li> </ul> <p><strong>Pseudocode:</strong></p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Initialize x₀
For t = 0 to N - 1:
    Sample momentum p ~ N(0, M)
    Set (x, p) = (x_t, p)
    Simulate Hamiltonian dynamics using the leapfrog integrator:
        For l = 1 to L:
            p = p + (ε/2)*∇log π(x)
            x = x + ε * M^(-1) * p
            p = p + (ε/2)*∇log π(x)
    Perform MH accept/reject step with probability:
        α = min{1, exp[ -H(x*, p*) + H(x_t, p) ]}
    If accepted:
        x_(t+1) = x*
    Else:
        x_(t+1) = x_t
</code></pre></div></div> <h3 id="35-metropolis-adjusted-langevin-algorithm-mala">3.5. Metropolis Adjusted Langevin Algorithm (MALA)</h3> <p><strong>Context &amp; Objective:</strong></p> <p>MALA enhances the standard Metropolis–Hastings algorithm by incorporating gradient information to propose moves that are more likely to be accepted. It is sometimes viewed as a discretized version of the Langevin diffusion process.</p> <p><strong>Langevin dynamics:</strong></p> <p>Consider the overdamped Langevin equation, which describes the evolution of $x$ in continuous time:</p> \[dx_t = \frac{1}{2}\nabla \log \pi(x_t) \, dt + dW_t\] <p>where $dW_t$ represents a Wiener process (or Brownian motion). The stationary distribution of this stochastic differential equation is $\pi(x)$.</p> <p><strong>Discretization and proposal:</strong></p> <p>Discretizing the Langevin equation with step size $\epsilon$ gives the proposal:</p> \[x' = x^{(t)} + \frac{\epsilon^2}{2}\nabla \log \pi(x^{(t)}) + \epsilon\, \eta, \quad \eta \sim \mathcal{N}(0, I)\] <p>This proposal is asymmetric due to the drift term $\frac{\epsilon^2}{2}\nabla \log \pi(x^{(t)})$.</p> <p><strong>Metropolis correction for MALA:</strong></p> <p>To correct for the discretization error and ensure that the chain converges to $\pi(x)$ an MH acceptance step is applied. The acceptance probability is computed as:</p> \[\alpha = \min\left\{1, \frac{\pi(x') \, q(x^{(t)} \mid x')}{\pi(x^{(t)}) \, q(x' \mid x^{(t)})}\right\}\] <p>where the proposal density $q$ is given by:</p> \[q(x' \mid x) = \mathcal{N}\left(x'; x + \frac{\epsilon^2}{2}\nabla \log \pi(x), \, \epsilon^2 I\right)\] <p><strong>Convergence and efficiency:</strong></p> <ul> <li><strong>Incorporation of Gradient Information:</strong> The use of $\nabla \log \pi(x)$ helps propose moves that are informed by the geometry of the target distribution, often leading to a higher acceptance rate compared to random-walk proposals.</li> <li><strong>Trade-off in Step Size:</strong> A small $\epsilon$ leads to high acceptance rates but slow exploration (small moves), while a large $\epsilon$ can improve exploration but may reduce the acceptance probability.</li> <li><strong>Theoretical Guarantees:</strong> Under suitable conditions (including proper scaling of $\epsilon$ and the ergodicity of the underlying Langevin diffusion), MALA converges to $\pi(x)$.</li> </ul> <p><strong>Pseudocode:</strong></p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Initialize x₀
For t = 0 to N - 1:
    Compute gradient g = ∇ log π(x_t)
    Propose x' = x_t + (ε²/2)*g + ε*η, where η ~ N(0,I)
    Compute asymmetric proposal densities q(x'|x_t) and q(x_t|x')
    Calculate acceptance probability:
        α = min{1, [π(x')q(x_t|x')] / [π(x_t)q(x'|x_t)] }
    Accept or reject accordingly.
</code></pre></div></div> <h2 id="4-use-cases-implementations">4. Use cases implementations</h2> <p>Instead of implementing vanilla MCMC algorithms of toy examples, and retrieving simple distributions with libraries like Numpy and Scipy, we chose to implement these algorithms in the context of real world use cases, that range from computer vision to audio signal modeling.</p> <p>These implementations can be tweaked and used for solving real world problems.</p> <p>Here is a link to a Github repository where you can find the full implementations with some nice visualizations:</p> <p><a href="https://github.com/Nizben/mcmc">MCMC</a></p> <h3 id="41-bayesian-linear-regression-via-gibbs-sampling">4.1. Bayesian Linear Regression (via Gibbs Sampling)</h3> <p><strong>Context:</strong></p> <p>In Bayesian linear regression, we model the relationship:</p> \[y = X\beta + \epsilon,\quad \epsilon\sim\mathcal{N}(0,\sigma^2I)\] <p>with priors $\beta \sim \mathcal{N}(\mu_0, \Sigma_0)$ and $\sigma^2 \sim \text{Inv-Gamma}(\alpha_0, \beta_0)$. The Gibbs sampler alternates between sampling $\beta$ and $\sigma^2$ .</p> <p><strong>Python Implementation:</strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="n">scipy.stats</span> <span class="kn">import</span> <span class="n">invgamma</span><span class="p">,</span> <span class="n">multivariate_normal</span>

<span class="c1"># Generate synthetic data
</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">seed</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
<span class="n">n</span><span class="p">,</span> <span class="n">d</span> <span class="o">=</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">2</span>
<span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">hstack</span><span class="p">((</span><span class="n">np</span><span class="p">.</span><span class="nf">ones</span><span class="p">((</span><span class="n">n</span><span class="p">,</span><span class="mi">1</span><span class="p">)),</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randn</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">d</span><span class="o">-</span><span class="mi">1</span><span class="p">)))</span>
<span class="n">true_beta</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">])</span>
<span class="n">sigma_true</span> <span class="o">=</span> <span class="mf">1.0</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">X</span> <span class="o">@</span> <span class="n">true_beta</span> <span class="o">+</span> <span class="n">sigma_true</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randn</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>

<span class="c1"># Prior hyperparameters
</span><span class="n">beta_prior_mean</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
<span class="n">beta_prior_cov</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">eye</span><span class="p">(</span><span class="n">d</span><span class="p">)</span> <span class="o">*</span> <span class="mi">10</span>
<span class="n">alpha_prior</span> <span class="o">=</span> <span class="mf">2.0</span>
<span class="n">beta_prior_val</span> <span class="o">=</span> <span class="mf">1.0</span>

<span class="c1"># Number of iterations for Gibbs sampling
</span><span class="n">iterations</span> <span class="o">=</span> <span class="mi">5000</span>
<span class="n">beta_samples</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">((</span><span class="n">iterations</span><span class="p">,</span> <span class="n">d</span><span class="p">))</span>
<span class="n">sigma2_samples</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">(</span><span class="n">iterations</span><span class="p">)</span>

<span class="c1"># Initial values
</span><span class="n">beta_current</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
<span class="n">sigma2_current</span> <span class="o">=</span> <span class="mf">1.0</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">iterations</span><span class="p">):</span>
    <span class="c1"># Sample beta | sigma^2, y, X
</span>    <span class="n">V_beta</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">linalg</span><span class="p">.</span><span class="nf">inv</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">linalg</span><span class="p">.</span><span class="nf">inv</span><span class="p">(</span><span class="n">beta_prior_cov</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">X</span><span class="p">.</span><span class="n">T</span> <span class="o">@</span> <span class="n">X</span><span class="p">)</span> <span class="o">/</span> <span class="n">sigma2_current</span><span class="p">)</span>
    <span class="n">m_beta</span> <span class="o">=</span> <span class="n">V_beta</span> <span class="o">@</span> <span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">linalg</span><span class="p">.</span><span class="nf">inv</span><span class="p">(</span><span class="n">beta_prior_cov</span><span class="p">)</span> <span class="o">@</span> <span class="n">beta_prior_mean</span> <span class="o">+</span> <span class="p">(</span><span class="n">X</span><span class="p">.</span><span class="n">T</span> <span class="o">@</span> <span class="n">y</span><span class="p">)</span> <span class="o">/</span> <span class="n">sigma2_current</span><span class="p">)</span>
    <span class="n">beta_current</span> <span class="o">=</span> <span class="n">multivariate_normal</span><span class="p">.</span><span class="nf">rvs</span><span class="p">(</span><span class="n">mean</span><span class="o">=</span><span class="n">m_beta</span><span class="p">,</span> <span class="n">cov</span><span class="o">=</span><span class="n">V_beta</span><span class="p">)</span>

    <span class="c1"># Sample sigma^2 | beta, y, X
</span>    <span class="n">alpha_post</span> <span class="o">=</span> <span class="n">alpha_prior</span> <span class="o">+</span> <span class="n">n</span><span class="o">/</span><span class="mi">2</span>
    <span class="n">residuals</span> <span class="o">=</span> <span class="n">y</span> <span class="o">-</span> <span class="n">X</span> <span class="o">@</span> <span class="n">beta_current</span>
    <span class="n">beta_post</span> <span class="o">=</span> <span class="n">beta_prior_val</span> <span class="o">+</span> <span class="mf">0.5</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">residuals</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>
    <span class="n">sigma2_current</span> <span class="o">=</span> <span class="n">invgamma</span><span class="p">.</span><span class="nf">rvs</span><span class="p">(</span><span class="n">a</span><span class="o">=</span><span class="n">alpha_post</span><span class="p">,</span> <span class="n">scale</span><span class="o">=</span><span class="n">beta_post</span><span class="p">)</span>

    <span class="n">beta_samples</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="p">:]</span> <span class="o">=</span> <span class="n">beta_current</span>
    <span class="n">sigma2_samples</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">sigma2_current</span>
</code></pre></div></div> <h3 id="42-audio-signal-reconstruction-with-metropolishastings-mh-and-preprocessing">4.2. Audio Signal Reconstruction with Metropolis–Hastings (MH) and Preprocessing</h3> <p><strong>Context:</strong></p> <p>Reconstructing a clean audio signal $s(t)$ from a noisy observation $y(t)$ involves preprocessing (e.g. filtering) and sampling from the posterior:</p> \[p(s|y) \propto p(y|s)p(s)\] <p>where $p(s)$ enforces smoothness.</p> <p><strong>Preprocessing &amp; MH Implementation:</strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="n">scipy.signal</span> <span class="kn">import</span> <span class="n">butter</span><span class="p">,</span> <span class="n">filtfilt</span>

<span class="c1"># Generate synthetic audio: sine wave with noise
</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">seed</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
<span class="n">t</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">500</span><span class="p">)</span>
<span class="n">s_true</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">sin</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="n">pi</span> <span class="o">*</span> <span class="mi">5</span> <span class="o">*</span> <span class="n">t</span><span class="p">)</span>
<span class="n">noise_std</span> <span class="o">=</span> <span class="mf">0.3</span>
<span class="n">y_noisy</span> <span class="o">=</span> <span class="n">s_true</span> <span class="o">+</span> <span class="n">noise_std</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randn</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">t</span><span class="p">))</span>

<span class="c1"># --- Preprocessing ---
# Apply a low-pass Butterworth filter to remove high-frequency noise
</span><span class="k">def</span> <span class="nf">butter_lowpass_filter</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">cutoff</span><span class="p">,</span> <span class="n">fs</span><span class="p">,</span> <span class="n">order</span><span class="o">=</span><span class="mi">4</span><span class="p">):</span>
    <span class="n">nyq</span> <span class="o">=</span> <span class="mf">0.5</span> <span class="o">*</span> <span class="n">fs</span>
    <span class="n">normal_cutoff</span> <span class="o">=</span> <span class="n">cutoff</span> <span class="o">/</span> <span class="n">nyq</span>
    <span class="n">b</span><span class="p">,</span> <span class="n">a</span> <span class="o">=</span> <span class="nf">butter</span><span class="p">(</span><span class="n">order</span><span class="p">,</span> <span class="n">normal_cutoff</span><span class="p">,</span> <span class="n">btype</span><span class="o">=</span><span class="sh">'</span><span class="s">low</span><span class="sh">'</span><span class="p">,</span> <span class="n">analog</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">y_filtered</span> <span class="o">=</span> <span class="nf">filtfilt</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">y_filtered</span>

<span class="n">fs</span> <span class="o">=</span> <span class="mi">500</span>  <span class="c1"># Sampling frequency (Hz)
</span><span class="n">cutoff</span> <span class="o">=</span> <span class="mi">10</span>  <span class="c1"># Cutoff frequency (Hz)
</span><span class="n">y_filtered</span> <span class="o">=</span> <span class="nf">butter_lowpass_filter</span><span class="p">(</span><span class="n">y_noisy</span><span class="p">,</span> <span class="n">cutoff</span><span class="p">,</span> <span class="n">fs</span><span class="p">)</span>

<span class="c1"># --- Metropolis–Hastings for Signal Reconstruction ---
</span><span class="k">def</span> <span class="nf">likelihood</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">sigma</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="nf">exp</span><span class="p">(</span><span class="o">-</span><span class="mf">0.5</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="nf">sum</span><span class="p">((</span><span class="n">y</span> <span class="o">-</span> <span class="n">s</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span> <span class="o">/</span> <span class="n">sigma</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">smoothness_prior</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">lambda_reg</span><span class="o">=</span><span class="mi">100</span><span class="p">):</span>
    <span class="n">diff</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">diff</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="nf">exp</span><span class="p">(</span><span class="o">-</span><span class="n">lambda_reg</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">diff</span><span class="o">**</span><span class="mi">2</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">target</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">sigma</span><span class="p">,</span> <span class="n">lambda_reg</span><span class="o">=</span><span class="mi">100</span><span class="p">):</span>
    <span class="k">return</span> <span class="nf">likelihood</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">sigma</span><span class="p">)</span> <span class="o">*</span> <span class="nf">smoothness_prior</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">lambda_reg</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">mh_audio_reconstruction</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">sigma_noise</span><span class="p">,</span> <span class="n">iterations</span><span class="o">=</span><span class="mi">3000</span><span class="p">,</span> <span class="n">proposal_std</span><span class="o">=</span><span class="mf">0.05</span><span class="p">):</span>
    <span class="n">s_current</span> <span class="o">=</span> <span class="n">y</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>  <span class="c1"># Initialize with the preprocessed signal
</span>    <span class="n">samples</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">iterations</span><span class="p">):</span>
        <span class="n">s_proposal</span> <span class="o">=</span> <span class="n">s_current</span> <span class="o">+</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">proposal_std</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="n">s_current</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
        <span class="n">ratio</span> <span class="o">=</span> <span class="nf">target</span><span class="p">(</span><span class="n">s_proposal</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">sigma_noise</span><span class="p">)</span> <span class="o">/</span> <span class="nf">target</span><span class="p">(</span><span class="n">s_current</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">sigma_noise</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">rand</span><span class="p">()</span> <span class="o">&lt;</span> <span class="nf">min</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">ratio</span><span class="p">):</span>
            <span class="n">s_current</span> <span class="o">=</span> <span class="n">s_proposal</span>
        <span class="n">samples</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">s_current</span><span class="p">.</span><span class="nf">copy</span><span class="p">())</span>
    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">samples</span><span class="p">)</span>

<span class="c1"># Run MH sampler on the preprocessed (filtered) signal
</span><span class="n">iterations</span> <span class="o">=</span> <span class="mi">3000</span>
<span class="n">samples</span> <span class="o">=</span> <span class="nf">mh_audio_reconstruction</span><span class="p">(</span><span class="n">y_filtered</span><span class="p">,</span> <span class="n">sigma_noise</span><span class="o">=</span><span class="n">noise_std</span><span class="p">,</span> <span class="n">iterations</span><span class="o">=</span><span class="n">iterations</span><span class="p">)</span>
<span class="n">s_reconstructed</span> <span class="o">=</span> <span class="n">samples</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div></div> <h3 id="43-image-reconstruction-with-hamiltonian-monte-carlo-hmc">4.3. Image Reconstruction with Hamiltonian Monte Carlo (HMC)</h3> <p><strong>Context:</strong></p> <p>For image deblurring or reconstruction, consider the posterior:</p> \[p(I|Y) \propto p(Y|I)p(I)\] <p>where $I$ is the image, $Y$ is the observation, and $p(I)$ encodes spatial smoothness. HMC efficiently explores high-dimensional image spaces.</p> <p><strong>Simplified HMC Implementation (2D Image Denoising):</strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="n">scipy.ndimage</span> <span class="kn">import</span> <span class="n">gaussian_filter</span>

<span class="c1"># Create synthetic image: gradient image with noise
</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">seed</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
<span class="n">image_size</span> <span class="o">=</span> <span class="mi">64</span>
<span class="n">true_image</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">outer</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">image_size</span><span class="p">),</span> <span class="n">np</span><span class="p">.</span><span class="nf">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">image_size</span><span class="p">))</span>
<span class="n">noisy_image</span> <span class="o">=</span> <span class="n">true_image</span> <span class="o">+</span> <span class="mf">0.3</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randn</span><span class="p">(</span><span class="n">image_size</span><span class="p">,</span> <span class="n">image_size</span><span class="p">)</span>

<span class="c1"># Define the target log-probability (negative energy) for the image.
# Combines a data fidelity term with a smoothness prior.
</span><span class="k">def</span> <span class="nf">log_target</span><span class="p">(</span><span class="n">I</span><span class="p">,</span> <span class="n">Y</span><span class="p">,</span> <span class="n">sigma</span><span class="p">,</span> <span class="n">lambda_reg</span><span class="p">):</span>
    <span class="n">fidelity</span> <span class="o">=</span> <span class="o">-</span><span class="mf">0.5</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="nf">sum</span><span class="p">((</span><span class="n">Y</span> <span class="o">-</span> <span class="n">I</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span> <span class="o">/</span> <span class="n">sigma</span><span class="o">**</span><span class="mi">2</span>
    <span class="c1"># Smoothness via a quadratic penalty on finite differences
</span>    <span class="n">smoothness</span> <span class="o">=</span> <span class="o">-</span><span class="n">lambda_reg</span> <span class="o">*</span> <span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">diff</span><span class="p">(</span><span class="n">I</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="n">np</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">diff</span><span class="p">(</span><span class="n">I</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">fidelity</span> <span class="o">+</span> <span class="n">smoothness</span>

<span class="c1"># HMC parameters
</span><span class="n">step_size</span> <span class="o">=</span> <span class="mf">0.001</span>
<span class="n">num_steps</span> <span class="o">=</span> <span class="mi">20</span>
<span class="n">iterations</span> <span class="o">=</span> <span class="mi">100</span>
<span class="n">sigma_noise</span> <span class="o">=</span> <span class="mf">0.3</span>
<span class="n">lambda_reg</span> <span class="o">=</span> <span class="mf">0.1</span>

<span class="c1"># Initialize with the noisy image
</span><span class="n">I_current</span> <span class="o">=</span> <span class="n">noisy_image</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">hmc_update</span><span class="p">(</span><span class="n">I_current</span><span class="p">,</span> <span class="n">Y</span><span class="p">,</span> <span class="n">step_size</span><span class="p">,</span> <span class="n">num_steps</span><span class="p">,</span> <span class="n">sigma</span><span class="p">,</span> <span class="n">lambda_reg</span><span class="p">):</span>
    <span class="n">I</span> <span class="o">=</span> <span class="n">I_current</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>
    <span class="n">momentum</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randn</span><span class="p">(</span><span class="o">*</span><span class="n">I</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
    <span class="n">current_momentum</span> <span class="o">=</span> <span class="n">momentum</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>

    <span class="c1"># Compute gradient of log_target using finite differences (central differences)
</span>    <span class="k">def</span> <span class="nf">grad_log_target</span><span class="p">(</span><span class="n">I</span><span class="p">):</span>
        <span class="n">grad</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros_like</span><span class="p">(</span><span class="n">I</span><span class="p">)</span>
        <span class="c1"># Fidelity term gradient
</span>        <span class="n">grad</span> <span class="o">+=</span> <span class="p">(</span><span class="n">Y</span> <span class="o">-</span> <span class="n">I</span><span class="p">)</span> <span class="o">/</span> <span class="n">sigma</span><span class="o">**</span><span class="mi">2</span>
        <span class="c1"># Smoothness gradient (using differences)
</span>        <span class="n">grad</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">:]</span> <span class="o">+=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">lambda_reg</span> <span class="o">*</span> <span class="p">(</span><span class="n">I</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">:]</span> <span class="o">-</span> <span class="n">I</span><span class="p">[</span><span class="mi">1</span><span class="p">:,</span> <span class="p">:])</span>
        <span class="n">grad</span><span class="p">[</span><span class="mi">1</span><span class="p">:,</span> <span class="p">:]</span>  <span class="o">-=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">lambda_reg</span> <span class="o">*</span> <span class="p">(</span><span class="n">I</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">:]</span> <span class="o">-</span> <span class="n">I</span><span class="p">[</span><span class="mi">1</span><span class="p">:,</span> <span class="p">:])</span>
        <span class="n">grad</span><span class="p">[:,</span> <span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">lambda_reg</span> <span class="o">*</span> <span class="p">(</span><span class="n">I</span><span class="p">[:,</span> <span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">I</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">:])</span>
        <span class="n">grad</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">:]</span>  <span class="o">-=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">lambda_reg</span> <span class="o">*</span> <span class="p">(</span><span class="n">I</span><span class="p">[:,</span> <span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">I</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">:])</span>
        <span class="k">return</span> <span class="n">grad</span>

    <span class="c1"># Leapfrog integration
</span>    <span class="n">grad</span> <span class="o">=</span> <span class="nf">grad_log_target</span><span class="p">(</span><span class="n">I</span><span class="p">)</span>
    <span class="n">momentum</span> <span class="o">+=</span> <span class="mf">0.5</span> <span class="o">*</span> <span class="n">step_size</span> <span class="o">*</span> <span class="n">grad</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">num_steps</span><span class="p">):</span>
        <span class="n">I</span> <span class="o">+=</span> <span class="n">step_size</span> <span class="o">*</span> <span class="n">momentum</span>
        <span class="n">grad</span> <span class="o">=</span> <span class="nf">grad_log_target</span><span class="p">(</span><span class="n">I</span><span class="p">)</span>
        <span class="n">momentum</span> <span class="o">+=</span> <span class="n">step_size</span> <span class="o">*</span> <span class="n">grad</span>
    <span class="n">momentum</span> <span class="o">+=</span> <span class="mf">0.5</span> <span class="o">*</span> <span class="n">step_size</span> <span class="o">*</span> <span class="n">grad</span>
    <span class="c1"># Negate momentum for symmetry
</span>    <span class="n">momentum</span> <span class="o">=</span> <span class="o">-</span><span class="n">momentum</span>

    <span class="c1"># Compute Hamiltonians
</span>    <span class="n">current_H</span> <span class="o">=</span> <span class="o">-</span><span class="nf">log_target</span><span class="p">(</span><span class="n">I_current</span><span class="p">,</span> <span class="n">Y</span><span class="p">,</span> <span class="n">sigma</span><span class="p">,</span> <span class="n">lambda_reg</span><span class="p">)</span> <span class="o">+</span> <span class="mf">0.5</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">current_momentum</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>
    <span class="n">proposed_H</span> <span class="o">=</span> <span class="o">-</span><span class="nf">log_target</span><span class="p">(</span><span class="n">I</span><span class="p">,</span> <span class="n">Y</span><span class="p">,</span> <span class="n">sigma</span><span class="p">,</span> <span class="n">lambda_reg</span><span class="p">)</span> <span class="o">+</span> <span class="mf">0.5</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">momentum</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">rand</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">np</span><span class="p">.</span><span class="nf">exp</span><span class="p">(</span><span class="n">current_H</span> <span class="o">-</span> <span class="n">proposed_H</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">I</span><span class="p">,</span> <span class="bp">True</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">I_current</span><span class="p">,</span> <span class="bp">False</span>

<span class="n">hmc_images</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">accepted</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">it</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">iterations</span><span class="p">):</span>
    <span class="n">I_new</span><span class="p">,</span> <span class="n">acc</span> <span class="o">=</span> <span class="nf">hmc_update</span><span class="p">(</span><span class="n">I_current</span><span class="p">,</span> <span class="n">noisy_image</span><span class="p">,</span> <span class="n">step_size</span><span class="p">,</span> <span class="n">num_steps</span><span class="p">,</span> <span class="n">sigma_noise</span><span class="p">,</span> <span class="n">lambda_reg</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">acc</span><span class="p">:</span>
        <span class="n">accepted</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="n">I_current</span> <span class="o">=</span> <span class="n">I_new</span>
    <span class="n">hmc_images</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">I_current</span><span class="p">.</span><span class="nf">copy</span><span class="p">())</span>

<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">HMC Acceptance Rate: </span><span class="si">{</span><span class="n">accepted</span><span class="o">/</span><span class="n">iterations</span><span class="si">:</span><span class="p">.</span><span class="mi">3</span><span class="n">f</span><span class="si">}</span><span class="sh">"</span>
</code></pre></div></div> <h3 id="44-implicit-neural-representations-neural-sdf-with-mala">4.4. Implicit Neural Representations (Neural SDF) with MALA</h3> <p><strong>Context:</strong></p> <p>Implicit neural representations (e.g., Neural Signed Distance Functions, SDFs) model continuous signals (e.g., 3D shapes) using neural networks. Uncertainty can be captured by placing a prior over latent variables. Here, we use MALA to sample from the posterior over a latent variable in a small Neural SDF model.</p> <p><strong>Improved Implementation &amp; Visualization:</strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">torch</span>
<span class="kn">import</span> <span class="n">torch.nn</span> <span class="k">as</span> <span class="n">nn</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="c1"># Define a simple Neural SDF with a latent vector parameter
</span><span class="k">class</span> <span class="nc">NeuralSDF</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">latent_dim</span><span class="o">=</span><span class="mi">5</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">(</span><span class="n">NeuralSDF</span><span class="p">,</span> <span class="n">self</span><span class="p">).</span><span class="nf">__init__</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">latent</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Parameter</span><span class="p">(</span><span class="n">torch</span><span class="p">.</span><span class="nf">randn</span><span class="p">(</span><span class="n">latent_dim</span><span class="p">))</span>
        <span class="n">self</span><span class="p">.</span><span class="n">fc</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Sequential</span><span class="p">(</span>
            <span class="n">nn</span><span class="p">.</span><span class="nc">Linear</span><span class="p">(</span><span class="mi">3</span> <span class="o">+</span> <span class="n">latent_dim</span><span class="p">,</span> <span class="mi">64</span><span class="p">),</span>
            <span class="n">nn</span><span class="p">.</span><span class="nc">ReLU</span><span class="p">(),</span>
            <span class="n">nn</span><span class="p">.</span><span class="nc">Linear</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="mi">64</span><span class="p">),</span>
            <span class="n">nn</span><span class="p">.</span><span class="nc">ReLU</span><span class="p">(),</span>
            <span class="n">nn</span><span class="p">.</span><span class="nc">Linear</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
        <span class="p">)</span>
    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="c1"># x: [batch, 3]
</span>        <span class="n">latent_expand</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">latent</span><span class="p">.</span><span class="nf">unsqueeze</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nf">expand</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="nf">size</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">x_input</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">cat</span><span class="p">([</span><span class="n">x</span><span class="p">,</span> <span class="n">latent_expand</span><span class="p">],</span> <span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">fc</span><span class="p">(</span><span class="n">x_input</span><span class="p">)</span>

<span class="c1"># Generate simulated observations: points near a sphere of radius 0.8
</span><span class="k">def</span> <span class="nf">generate_sdf_observations</span><span class="p">(</span><span class="n">n_points</span><span class="o">=</span><span class="mi">200</span><span class="p">):</span>
    <span class="n">points</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">rand</span><span class="p">(</span><span class="n">n_points</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">-</span> <span class="mi">1</span>  <span class="c1"># uniformly in [-1,1]^3
</span>    <span class="n">sdf_true</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">norm</span><span class="p">(</span><span class="n">points</span><span class="p">,</span> <span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">keepdim</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="o">-</span> <span class="mf">0.8</span>
    <span class="n">sdf_obs</span> <span class="o">=</span> <span class="n">sdf_true</span> <span class="o">+</span> <span class="mf">0.05</span> <span class="o">*</span> <span class="n">torch</span><span class="p">.</span><span class="nf">randn_like</span><span class="p">(</span><span class="n">sdf_true</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">points</span><span class="p">,</span> <span class="n">sdf_obs</span>

<span class="n">points</span><span class="p">,</span> <span class="n">sdf_obs</span> <span class="o">=</span> <span class="nf">generate_sdf_observations</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>

<span class="c1"># Define log-likelihood and log-prior for the latent variable
</span><span class="k">def</span> <span class="nf">log_likelihood</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">points</span><span class="p">,</span> <span class="n">sdf_obs</span><span class="p">,</span> <span class="n">sigma</span><span class="o">=</span><span class="mf">0.05</span><span class="p">):</span>
    <span class="n">pred</span> <span class="o">=</span> <span class="nf">model</span><span class="p">(</span><span class="n">points</span><span class="p">)</span>
    <span class="k">return</span> <span class="o">-</span><span class="mf">0.5</span> <span class="o">*</span> <span class="n">torch</span><span class="p">.</span><span class="nf">sum</span><span class="p">((</span><span class="n">sdf_obs</span> <span class="o">-</span> <span class="n">pred</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span> <span class="o">/</span> <span class="n">sigma</span><span class="o">**</span><span class="mi">2</span>

<span class="k">def</span> <span class="nf">log_prior</span><span class="p">(</span><span class="n">model</span><span class="p">):</span>
    <span class="k">return</span> <span class="o">-</span><span class="mf">0.5</span> <span class="o">*</span> <span class="n">torch</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">model</span><span class="p">.</span><span class="n">latent</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">log_posterior</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">points</span><span class="p">,</span> <span class="n">sdf_obs</span><span class="p">,</span> <span class="n">sigma</span><span class="o">=</span><span class="mf">0.05</span><span class="p">):</span>
    <span class="k">return</span> <span class="nf">log_likelihood</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">points</span><span class="p">,</span> <span class="n">sdf_obs</span><span class="p">,</span> <span class="n">sigma</span><span class="p">)</span> <span class="o">+</span> <span class="nf">log_prior</span><span class="p">(</span><span class="n">model</span><span class="p">)</span>

<span class="c1"># MALA update for the latent variable
</span><span class="k">def</span> <span class="nf">mala_update</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">points</span><span class="p">,</span> <span class="n">sdf_obs</span><span class="p">,</span> <span class="n">sigma</span><span class="o">=</span><span class="mf">0.05</span><span class="p">,</span> <span class="n">step_size</span><span class="o">=</span><span class="mf">1e-3</span><span class="p">):</span>
    <span class="n">model</span><span class="p">.</span><span class="nf">zero_grad</span><span class="p">()</span>
    <span class="n">logp</span> <span class="o">=</span> <span class="nf">log_posterior</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">points</span><span class="p">,</span> <span class="n">sdf_obs</span><span class="p">,</span> <span class="n">sigma</span><span class="p">)</span>
    <span class="n">logp</span><span class="p">.</span><span class="nf">backward</span><span class="p">()</span>
    <span class="n">grad</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">latent</span><span class="p">.</span><span class="n">grad</span><span class="p">.</span><span class="nf">detach</span><span class="p">()</span>
    <span class="n">latent_current</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">latent</span><span class="p">.</span><span class="nf">detach</span><span class="p">().</span><span class="nf">clone</span><span class="p">()</span>
    <span class="n">noise</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">randn_like</span><span class="p">(</span><span class="n">latent_current</span><span class="p">)</span>
    <span class="n">latent_proposal</span> <span class="o">=</span> <span class="n">latent_current</span> <span class="o">+</span> <span class="mf">0.5</span> <span class="o">*</span> <span class="n">step_size</span> <span class="o">*</span> <span class="n">grad</span> <span class="o">+</span> <span class="n">torch</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="n">torch</span><span class="p">.</span><span class="nf">tensor</span><span class="p">(</span><span class="n">step_size</span><span class="p">))</span> <span class="o">*</span> <span class="n">noise</span>

    <span class="c1"># Compute acceptance probability (using symmetric proposal assumption)
</span>    <span class="n">latent_old</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">latent</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="nf">clone</span><span class="p">()</span>
    <span class="n">model</span><span class="p">.</span><span class="n">latent</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">latent_proposal</span>
    <span class="n">logp_proposal</span> <span class="o">=</span> <span class="nf">log_posterior</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">points</span><span class="p">,</span> <span class="n">sdf_obs</span><span class="p">,</span> <span class="n">sigma</span><span class="p">)</span>
    <span class="n">accept_prob</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">exp</span><span class="p">(</span><span class="n">logp_proposal</span> <span class="o">-</span> <span class="n">logp</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">torch</span><span class="p">.</span><span class="nf">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">accept_prob</span><span class="p">:</span>
        <span class="n">accepted</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">model</span><span class="p">.</span><span class="n">latent</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">latent_old</span>
        <span class="n">accepted</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="k">return</span> <span class="n">accepted</span><span class="p">,</span> <span class="n">model</span><span class="p">.</span><span class="n">latent</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="nf">clone</span><span class="p">(),</span> <span class="n">logp_proposal</span><span class="p">.</span><span class="nf">item</span><span class="p">()</span>

<span class="n">model</span> <span class="o">=</span> <span class="nc">NeuralSDF</span><span class="p">(</span><span class="n">latent_dim</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
<span class="n">iterations</span> <span class="o">=</span> <span class="mi">2000</span>
<span class="n">latent_samples</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">log_probs</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">accepts</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">iterations</span><span class="p">):</span>
    <span class="n">accepted</span><span class="p">,</span> <span class="n">latent_sample</span><span class="p">,</span> <span class="n">lp</span> <span class="o">=</span> <span class="nf">mala_update</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">points</span><span class="p">,</span> <span class="n">sdf_obs</span><span class="p">,</span> <span class="n">sigma</span><span class="o">=</span><span class="mf">0.05</span><span class="p">,</span> <span class="n">step_size</span><span class="o">=</span><span class="mf">1e-3</span><span class="p">)</span>
    <span class="n">latent_samples</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">latent_sample</span><span class="p">.</span><span class="nf">numpy</span><span class="p">())</span>
    <span class="n">log_probs</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">lp</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">accepted</span><span class="p">:</span>
        <span class="n">accepts</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">MALA Acceptance Rate: </span><span class="si">{</span><span class="n">accepts</span><span class="o">/</span><span class="n">iterations</span><span class="si">:</span><span class="p">.</span><span class="mi">3</span><span class="n">f</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <h2 id="5-conclusion">5. Conclusion</h2> <p>In this post, we have presented a rigorous exploration of MCMC methods. We began with theoretical foundations and then developed multiple algorithms with step-by-step pseudocode and theoretical justification. We detailed five major techniques: Importance Sampling, Metropolis–Hastings, Gibbs Sampling, Hamiltonian Monte Carlo, and MALA.</p> <p>The use cases further demonstrate the practicality of these methods:</p> <ul> <li><strong>Bayesian linear regression</strong> uses Gibbs sampling to infer regression parameters.</li> <li><strong>Audio signal reconstruction</strong> incorporates signal preprocessing before applying MH.</li> <li><strong>Image reconstruction</strong> leverages HMC for efficient exploration in high dimensions.</li> <li><strong>Implicit neural representations (Neural SDF)</strong> showcase MALA for sampling latent variables in modern deep learning models.</li> </ul>]]></content><author><name></name></author><category term="MCMC"/><summary type="html"><![CDATA[1. Introduction]]></summary></entry><entry><title type="html">a distill-style blog post</title><link href="https://nizben.github.io/blog/2021/distill/" rel="alternate" type="text/html" title="a distill-style blog post"/><published>2021-05-22T00:00:00+00:00</published><updated>2021-05-22T00:00:00+00:00</updated><id>https://nizben.github.io/blog/2021/distill</id><content type="html" xml:base="https://nizben.github.io/blog/2021/distill/"><![CDATA[<h2 id="equations">Equations</h2> <p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine. You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p> <p>In fact, you can also use a single dollar sign <code class="language-plaintext highlighter-rouge">$</code> to create inline formulas, such as <code class="language-plaintext highlighter-rouge">$ E = mc^2 $</code>, which will render as $ E = mc^2 $. This approach provides the same effect during TeX-based compilation, but visually it appears slightly less bold compared to double-dollar signs <code class="language-plaintext highlighter-rouge">$$</code>, making it blend more naturally with surrounding text.</p> <p>To use display mode, again surround your expression with <code class="language-plaintext highlighter-rouge">$$</code> and place it as a separate paragraph. Here is an example:</p> \[\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)\] <p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p> <hr/> <h2 id="citations">Citations</h2> <p>Citations are then used in the article body with the <code class="language-plaintext highlighter-rouge">&lt;d-cite&gt;</code> tag. The key attribute is a reference to the id provided in the bibliography. The key attribute can take multiple ids, separated by commas.</p> <p>The citation is presented inline like this: <d-cite key="gregor2015draw"></d-cite> (a number that displays more information on hover). If you have an appendix, a bibliography is automatically created and populated in it.</p> <p>Distill chose a numerical inline citation style to improve readability of citation dense articles and because many of the benefits of longer citations are obviated by displaying more information on hover. However, we consider it good style to mention author last names if you discuss something at length and it fits into the flow well — the authors are human and it’s nice for them to have the community associate them with their work.</p> <hr/> <h2 id="footnotes">Footnotes</h2> <p>Just wrap the text you would like to show up in a footnote in a <code class="language-plaintext highlighter-rouge">&lt;d-footnote&gt;</code> tag. The number of the footnote will be automatically generated.<d-footnote>This will become a hoverable footnote.</d-footnote></p> <hr/> <h2 id="code-blocks">Code Blocks</h2> <p>Syntax highlighting is provided within <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> tags. An example of inline code snippets: <code class="language-plaintext highlighter-rouge">&lt;d-code language="html"&gt;let x = 10;&lt;/d-code&gt;</code>. For larger blocks of code, add a <code class="language-plaintext highlighter-rouge">block</code> attribute:</p> <d-code block="" language="javascript"> var x = 25; function(x) { return x * x; } </d-code> <p><strong>Note:</strong> <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> blocks do not look good in the dark mode. You can instead use the standard Jekyll syntax highlight with the <code class="language-plaintext highlighter-rouge">highlight</code> liquid tag.</p> <figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
<span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
<span class="k">return</span> <span class="nx">x</span> <span class="err">\</span><span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure> <p>You can also write standard Markdown code blocks in triple ticks with a language tag, for instance:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
  <span class="k">return</span> <span class="n">x</span>
</code></pre></div></div> <hr/> <h2 id="interactive-plots">Interactive Plots</h2> <p>You can add interative plots using plotly + iframes :framed_picture:</p> <div class="l-page"> <iframe src="/assets/plotly/demo.html" frameborder="0" scrolling="no" height="500px" width="100%" style="border: 1px dashed grey;"></iframe> </div> <p>The plot must be generated separately and saved into an HTML file. To generate the plot that you see above, you can use the following code snippet:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">plotly.express</span> <span class="k">as</span> <span class="n">px</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span>
<span class="sh">'</span><span class="s">https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv</span><span class="sh">'</span>
<span class="p">)</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="nf">density_mapbox</span><span class="p">(</span>
<span class="n">df</span><span class="p">,</span>
<span class="n">lat</span><span class="o">=</span><span class="sh">'</span><span class="s">Latitude</span><span class="sh">'</span><span class="p">,</span>
<span class="n">lon</span><span class="o">=</span><span class="sh">'</span><span class="s">Longitude</span><span class="sh">'</span><span class="p">,</span>
<span class="n">z</span><span class="o">=</span><span class="sh">'</span><span class="s">Magnitude</span><span class="sh">'</span><span class="p">,</span>
<span class="n">radius</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
<span class="n">center</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">lat</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">lon</span><span class="o">=</span><span class="mi">180</span><span class="p">),</span>
<span class="n">zoom</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
<span class="n">mapbox_style</span><span class="o">=</span><span class="sh">"</span><span class="s">stamen-terrain</span><span class="sh">"</span><span class="p">,</span>
<span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">write_html</span><span class="p">(</span><span class="sh">'</span><span class="s">assets/plotly/demo.html</span><span class="sh">'</span><span class="p">)</span></code></pre></figure> <hr/> <h2 id="details-boxes">Details boxes</h2> <p>Details boxes are collapsible boxes which hide additional information from the user. They can be added with the <code class="language-plaintext highlighter-rouge">details</code> liquid tag:</p> <details><summary>Click here to know more</summary> <p>Additional details, where math \(2x - 1\) and <code class="language-plaintext highlighter-rouge">code</code> is rendered correctly.</p> </details> <hr/> <h2 id="mermaid">Mermaid</h2> <p>This theme supports creating diagrams directly in markdown using <a href="https://mermaid.js.org/">Mermaid</a>. Mermaid enables users to render flowcharts, sequence diagrams, class diagrams, Gantt charts, and more. Simply embed the diagram syntax within a mermaid code block.</p> <p>To create a Gantt chart, you can use the following syntax:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">mermaid
</span><span class="sb">gantt
    dateFormat  YYYY-MM-DD
    title A Gantt Diagram

    section Section
    Task A           :a1, 2025-01-01, 30d
    Task B           :after a1, 20d
    Task C           :2025-01-10, 12d</span>
<span class="p">```</span>
</code></pre></div></div> <p>And here’s how it will be rendered:</p> <pre><code class="language-mermaid">gantt
    dateFormat  YYYY-MM-DD
    title A Gantt Diagram

    section Section
    Task A           :a1, 2025-01-01, 30d
    Task B           :after a1, 20d
    Task C           :2025-01-10, 12d
</code></pre> <p>Similarly, you can also use it to create beautiful class diagrams:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>```mermaid
classDiagram
direction LR
    class Animal {
        +String species
        +int age
        +makeSound()
    }
    class Dog {
        +String breed
        +bark()
    }
    class Cat {
        +String color
        +meow()
    }
    class Bird {
        +String wingSpan
        +fly()
    }
    class Owner {
        +String name
        +int age
        +adoptAnimal(Animal animal)
    }

    Animal &lt;|-- Dog
    Animal &lt;|-- Cat
    Animal &lt;|-- Bird
    Owner "1" --&gt; "0..*" Animal

    Dog : +fetch()
    Cat : +purr()
    Bird : +sing()
```
</code></pre></div></div> <p>It will be presented as:</p> <pre><code class="language-mermaid">classDiagram
direction LR
    class Animal {
        +String species
        +int age
        +makeSound()
    }
    class Dog {
        +String breed
        +bark()
    }
    class Cat {
        +String color
        +meow()
    }
    class Bird {
        +String wingSpan
        +fly()
    }
    class Owner {
        +String name
        +int age
        +adoptAnimal(Animal animal)
    }

    Animal &lt;|-- Dog
    Animal &lt;|-- Cat
    Animal &lt;|-- Bird
    Owner "1" --&gt; "0..*" Animal

    Dog : +fetch()
    Cat : +purr()
    Bird : +sing()
</code></pre> <p>With Mermaid, you can easily add clear and dynamic diagrams to enhance your blog content.</p> <hr/> <h2 id="diff2html">Diff2Html</h2> <p>This theme also supports integrating <a href="https://github.com/rtfpessoa/diff2html">Diff2Html</a>, a tool that beautifully renders code differences (diffs) directly in markdown. Diff2Html is ideal for showcasing code changes, allowing you to clearly present additions, deletions, and modifications. It’s perfect for code reviews, documentation, and tutorials where step-by-step code changes need to be highlighted—you can even introduce changes across multiple files at once.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">diff2html
</span><span class="sb">diff --git a/utils/mathUtils.js b/utils/mathUtils.js
index 3b5f3d1..c7f9b2e 100644
--- a/utils/mathUtils.js
+++ b/utils/mathUtils.js
@@ -1,8 +1,12 @@
-// Basic math utilities
+// Extended math utilities with additional functions

-export function calculateArea(radius) {
-    const PI = 3.14159;
+export function calculateCircleMetrics(radius) {
+    const PI = Math.PI;
     const area = PI * radius ** 2;
+    const circumference = 2 * PI * radius;
+
+    if (!isValidRadius(radius)) throw new Error("Invalid radius");
+
     return { area, circumference };
 }

-export function validateRadius(radius) {
+export function isValidRadius(radius) {
     return typeof radius === 'number' &amp;&amp; radius &gt; 0;
 }

diff --git a/main.js b/main.js
index 5f6a9c3..b7d4e8f 100644
--- a/main.js
+++ b/main.js
@@ -2,9 +2,12 @@
 import { calculateCircleMetrics } from './utils/mathUtils';

-function displayCircleMetrics(radius) {
-    const { area } = calculateCircleMetrics(radius);
+function displayCircleMetrics(radius) {
+    const { area, circumference } = calculateCircleMetrics(radius);
     console.log(`Area: ${area}`);
+    console.log(`Circumference: ${circumference}`);
 }

-displayCircleMetrics(5);
+try {
+    displayCircleMetrics(5);
+} catch (error) {
+    console.error("Error:", error.message);
+}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Here’s how it will look when rendered with Diff2Html:</p> <pre><code class="language-diff2html">diff --git a/utils/mathUtils.js b/utils/mathUtils.js
index 3b5f3d1..c7f9b2e 100644
--- a/utils/mathUtils.js
+++ b/utils/mathUtils.js
@@ -1,8 +1,12 @@
-// Basic math utilities
+// Extended math utilities with additional functions

-export function calculateArea(radius) {
-    const PI = 3.14159;
+export function calculateCircleMetrics(radius) {
+    const PI = Math.PI;
     const area = PI * radius ** 2;
+    const circumference = 2 * PI * radius;
+
+    if (!isValidRadius(radius)) throw new Error("Invalid radius");
+
     return { area, circumference };
 }

-export function validateRadius(radius) {
+export function isValidRadius(radius) {
     return typeof radius === 'number' &amp;&amp; radius &gt; 0;
 }

diff --git a/main.js b/main.js
index 5f6a9c3..b7d4e8f 100644
--- a/main.js
+++ b/main.js
@@ -2,9 +2,12 @@
 import { calculateCircleMetrics } from './utils/mathUtils';

-function displayCircleMetrics(radius) {
-    const { area } = calculateCircleMetrics(radius);
+function displayCircleMetrics(radius) {
+    const { area, circumference } = calculateCircleMetrics(radius);
     console.log(`Area: ${area}`);
+    console.log(`Circumference: ${circumference}`);
 }

-displayCircleMetrics(5);
+try {
+    displayCircleMetrics(5);
+} catch (error) {
+    console.error("Error:", error.message);
+}
</code></pre> <hr/> <h2 id="leaflet">Leaflet</h2> <p><a href="https://leafletjs.com/">Leaflet</a> is created by Ukrainian software engineer <a href="https://agafonkin.com/">Volodymyr Agafonkin</a>, allowing interactive maps to be embedded in webpages. With support for <a href="https://geojson.org/">GeoJSON data</a>, Leaflet allows you to highlight specific regions, making it easy to visualize geographical information in detail.</p> <p>You can use the following code to load map information on <a href="https://www.openstreetmap.org/">OpenStreetMap</a>:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">geojson
</span><span class="sb">{
  "type": "FeatureCollection",
  "features": [
    {
      "type": "Feature",
      "properties": {
        "name": "Crimea",
        "popupContent": "Occupied Crimea"
      },
      "geometry": {
        "type": "Polygon",
        "coordinates": [
          [
            [
              33.9,
              45.3
            ],
            [
              36.5,
              45.3
            ],
            [
              36.5,
              44.4
            ],
            [
              33.9,
              44.4
            ],
            [
              33.9,
              45.3
            ]
          ]
        ]
      }
    },
    {
      "type": "Feature",
      "properties": {
        "name": "Donetsk",
        "popupContent": "Occupied Donetsk"
      },
      "geometry": {
        "type": "Polygon",
        "coordinates": [
          [
            [
              37.5,
              48.5
            ],
            [
              39.5,
              48.5
            ],
            [
              39.5,
              47.5
            ],
            [
              37.5,
              47.5
            ],
            [
              37.5,
              48.5
            ]
          ]
        ]
      }
    },
    {
      "type": "Feature",
      "properties": {
        "name": "Luhansk",
        "popupContent": "Occupied Luhansk"
      },
      "geometry": {
        "type": "Polygon",
        "coordinates": [
          [
            [
              38.5,
              49.5
            ],
            [
              40.5,
              49.5
            ],
            [
              40.5,
              48.5
            ],
            [
              38.5,
              48.5
            ],
            [
              38.5,
              49.5
            ]
          ]
        ]
      }
    },
    {
      "type": "Feature",
      "properties": {
        "name": "Kherson",
        "popupContent": "Occupied Kherson"
      },
      "geometry": {
        "type": "Polygon",
        "coordinates": [
          [
            [
              32.3,
              47.3
            ],
            [
              34.3,
              47.3
            ],
            [
              34.3,
              46.3
            ],
            [
              32.3,
              46.3
            ],
            [
              32.3,
              47.3
            ]
          ]
        ]
      }
    },
    {
      "type": "Feature",
      "properties": {
        "name": "Zaporizhzhia",
        "popupContent": "Occupied Zaporizhzhia"
      },
      "geometry": {
        "type": "Polygon",
        "coordinates": [
          [
            [
              34.3,
              48
            ],
            [
              36.3,
              48
            ],
            [
              36.3,
              47
            ],
            [
              34.3,
              47
            ],
            [
              34.3,
              48
            ]
          ]
        ]
      }
    }
  ]
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>The rendered map below highlights the regions of Ukraine that have been illegally occupied by Russia over the years, including Crimea and the four eastern regions:</p> <pre><code class="language-geojson">{
  "type": "FeatureCollection",
  "features": [
    {
      "type": "Feature",
      "properties": {
        "name": "Crimea",
        "popupContent": "Occupied Crimea"
      },
      "geometry": {
        "type": "Polygon",
        "coordinates": [
          [
            [
              33.9,
              45.3
            ],
            [
              36.5,
              45.3
            ],
            [
              36.5,
              44.4
            ],
            [
              33.9,
              44.4
            ],
            [
              33.9,
              45.3
            ]
          ]
        ]
      }
    },
    {
      "type": "Feature",
      "properties": {
        "name": "Donetsk",
        "popupContent": "Occupied Donetsk"
      },
      "geometry": {
        "type": "Polygon",
        "coordinates": [
          [
            [
              37.5,
              48.5
            ],
            [
              39.5,
              48.5
            ],
            [
              39.5,
              47.5
            ],
            [
              37.5,
              47.5
            ],
            [
              37.5,
              48.5
            ]
          ]
        ]
      }
    },
    {
      "type": "Feature",
      "properties": {
        "name": "Luhansk",
        "popupContent": "Occupied Luhansk"
      },
      "geometry": {
        "type": "Polygon",
        "coordinates": [
          [
            [
              38.5,
              49.5
            ],
            [
              40.5,
              49.5
            ],
            [
              40.5,
              48.5
            ],
            [
              38.5,
              48.5
            ],
            [
              38.5,
              49.5
            ]
          ]
        ]
      }
    },
    {
      "type": "Feature",
      "properties": {
        "name": "Kherson",
        "popupContent": "Occupied Kherson"
      },
      "geometry": {
        "type": "Polygon",
        "coordinates": [
          [
            [
              32.3,
              47.3
            ],
            [
              34.3,
              47.3
            ],
            [
              34.3,
              46.3
            ],
            [
              32.3,
              46.3
            ],
            [
              32.3,
              47.3
            ]
          ]
        ]
      }
    },
    {
      "type": "Feature",
      "properties": {
        "name": "Zaporizhzhia",
        "popupContent": "Occupied Zaporizhzhia"
      },
      "geometry": {
        "type": "Polygon",
        "coordinates": [
          [
            [
              34.3,
              48
            ],
            [
              36.3,
              48
            ],
            [
              36.3,
              47
            ],
            [
              34.3,
              47
            ],
            [
              34.3,
              48
            ]
          ]
        ]
      }
    }
  ]
}
</code></pre> <hr/> <h2 id="chartjs-echarts-and-vega-lite">Chartjs, Echarts and Vega-Lite</h2> <p><a href="https://www.chartjs.org/">Chart.js</a> is a versatile JavaScript library for creating responsive and interactive charts. Supporting multiple chart types like bar, line, pie, and radar, it’s an ideal tool for visualizing data directly in webpages.</p> <p>Here’s an example of a JSON-style configuration that creates a bar chart in Chart.js:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>```chartjs
{
  "type": "bar",
  "data": {
    "labels": ["2017", "2018", "2019", "2020", "2021"],
    "datasets": [
      {
        "label": "Population (millions)",
        "data": [12, 15, 13, 14, 16],
        "backgroundColor": "rgba(54, 162, 235, 0.6)",
        "borderColor": "rgba(54, 162, 235, 1)",
        "borderWidth": 1
      }
    ]
  },
  "options": {
    "scales": {
      "y": {
        "beginAtZero": true
      }
    }
  }
}
```
</code></pre></div></div> <p>The rendered bar chart illustrates population data from 2017 to 2021:</p> <pre><code class="language-chartjs">{
  "type": "bar",
  "data": {
    "labels": ["2017", "2018", "2019", "2020", "2021"],
    "datasets": [
      {
        "label": "Population (millions)",
        "data": [12, 15, 13, 14, 16],
        "backgroundColor": "rgba(54, 162, 235, 0.6)",
        "borderColor": "rgba(54, 162, 235, 1)",
        "borderWidth": 1
      }
    ]
  },
  "options": {
    "scales": {
      "y": {
        "beginAtZero": true
      }
    }
  }
}
</code></pre> <hr/> <p><a href="https://echarts.apache.org/">ECharts</a> is a powerful visualization library from <a href="https://www.apache.org/">Apache</a> that supports a wide range of interactive charts, including more advanced types such as scatter plots, heatmaps, and geographic maps.</p> <p>The following JSON configuration creates a visually enhanced line chart that displays monthly sales data for two products.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>```echarts
{
  "title": {
    "text": "Monthly Sales Comparison",
    "left": "center"
  },
  "tooltip": {
    "trigger": "axis",
    "backgroundColor": "rgba(50, 50, 50, 0.7)",
    "borderColor": "#777",
    "borderWidth": 1,
    "textStyle": {
      "color": "#fff"
    }
  },
  "legend": {
    "data": ["Product A", "Product B"],
    "top": "10%"
  },
  "xAxis": {
    "type": "category",
    "data": ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
    "axisLine": {
      "lineStyle": {
        "color": "#888"
      }
    }
  },
  "yAxis": {
    "type": "value",
    "axisLine": {
      "lineStyle": {
        "color": "#888"
      }
    },
    "splitLine": {
      "lineStyle": {
        "type": "dashed"
      }
    }
  },
  "series": [
    {
      "name": "Product A",
      "type": "line",
      "smooth": true,
      "data": [820, 932, 901, 934, 1290, 1330, 1320, 1400, 1450, 1500, 1600, 1650],
      "itemStyle": {
        "color": "#5470C6"
      },
      "lineStyle": {
        "width": 3
      },
      "areaStyle": {
        "color": {
          "type": "linear",
          "x": 0,
          "y": 0,
          "x2": 0,
          "y2": 1,
          "colorStops": [
            { "offset": 0, "color": "rgba(84, 112, 198, 0.5)" },
            { "offset": 1, "color": "rgba(84, 112, 198, 0)" }
          ]
        }
      },
      "emphasis": {
        "focus": "series"
      }
    },
    {
      "name": "Product B",
      "type": "line",
      "smooth": true,
      "data": [620, 732, 701, 734, 1090, 1130, 1120, 1200, 1250, 1300, 1400, 1450],
      "itemStyle": {
        "color": "#91CC75"
      },
      "lineStyle": {
        "width": 3
      },
      "areaStyle": {
        "color": {
          "type": "linear",
          "x": 0,
          "y": 0,
          "x2": 0,
          "y2": 1,
          "colorStops": [
            { "offset": 0, "color": "rgba(145, 204, 117, 0.5)" },
            { "offset": 1, "color": "rgba(145, 204, 117, 0)" }
          ]
        }
      },
      "emphasis": {
        "focus": "series"
      }
    }
  ]
}
```
</code></pre></div></div> <p>The rendered output is shown below, and you can also interact with it using your mouse:</p> <pre><code class="language-echarts">{
  "title": {
    "text": "Monthly Sales Comparison",
    "left": "center"
  },
  "tooltip": {
    "trigger": "axis",
    "backgroundColor": "rgba(50, 50, 50, 0.7)",
    "borderColor": "#777",
    "borderWidth": 1,
    "textStyle": {
      "color": "#fff"
    }
  },
  "legend": {
    "data": ["Product A", "Product B"],
    "top": "10%"
  },
  "xAxis": {
    "type": "category",
    "data": ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
    "axisLine": {
      "lineStyle": {
        "color": "#888"
      }
    }
  },
  "yAxis": {
    "type": "value",
    "axisLine": {
      "lineStyle": {
        "color": "#888"
      }
    },
    "splitLine": {
      "lineStyle": {
        "type": "dashed"
      }
    }
  },
  "series": [
    {
      "name": "Product A",
      "type": "line",
      "smooth": true,
      "data": [820, 932, 901, 934, 1290, 1330, 1320, 1400, 1450, 1500, 1600, 1650],
      "itemStyle": {
        "color": "#5470C6"
      },
      "lineStyle": {
        "width": 3
      },
      "areaStyle": {
        "color": {
          "type": "linear",
          "x": 0,
          "y": 0,
          "x2": 0,
          "y2": 1,
          "colorStops": [
            { "offset": 0, "color": "rgba(84, 112, 198, 0.5)" },
            { "offset": 1, "color": "rgba(84, 112, 198, 0)" }
          ]
        }
      },
      "emphasis": {
        "focus": "series"
      }
    },
    {
      "name": "Product B",
      "type": "line",
      "smooth": true,
      "data": [620, 732, 701, 734, 1090, 1130, 1120, 1200, 1250, 1300, 1400, 1450],
      "itemStyle": {
        "color": "#91CC75"
      },
      "lineStyle": {
        "width": 3
      },
      "areaStyle": {
        "color": {
          "type": "linear",
          "x": 0,
          "y": 0,
          "x2": 0,
          "y2": 1,
          "colorStops": [
            { "offset": 0, "color": "rgba(145, 204, 117, 0.5)" },
            { "offset": 1, "color": "rgba(145, 204, 117, 0)" }
          ]
        }
      },
      "emphasis": {
        "focus": "series"
      }
    }
  ]
}
</code></pre> <hr/> <p><a href="https://vega.github.io/vega-lite/">Vega-Lite</a> is a declarative visualization grammar that allows users to create, share, and customize a wide range of interactive data visualizations. The following JSON configuration generates a straightforward bar chart:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>```vega_lite
{
  "$schema": "https://vega.github.io/schema/vega/v5.json",
  "width": 400,
  "height": 200,
  "padding": 5,

  "data": [
    {
      "name": "table",
      "values": [
        {"category": "A", "value": 28},
        {"category": "B", "value": 55},
        {"category": "C", "value": 43},
        {"category": "D", "value": 91},
        {"category": "E", "value": 81},
        {"category": "F", "value": 53},
        {"category": "G", "value": 19},
        {"category": "H", "value": 87}
      ]
    }
  ],

  "scales": [
    {
      "name": "xscale",
      "type": "band",
      "domain": {"data": "table", "field": "category"},
      "range": "width",
      "padding": 0.1
    },
    {
      "name": "yscale",
      "type": "linear",
      "domain": {"data": "table", "field": "value"},
      "nice": true,
      "range": "height"
    }
  ],

  "axes": [
    {"orient": "bottom", "scale": "xscale"},
    {"orient": "left", "scale": "yscale"}
  ],

  "marks": [
    {
      "type": "rect",
      "from": {"data": "table"},
      "encode": {
        "enter": {
          "x": {"scale": "xscale", "field": "category"},
          "width": {"scale": "xscale", "band": 0.8},
          "y": {"scale": "yscale", "field": "value"},
          "y2": {"scale": "yscale", "value": 0},
          "fill": {"value": "steelblue"}
        },
        "update": {
          "fillOpacity": {"value": 1}
        },
        "hover": {
          "fill": {"value": "orange"}
        }
      }
    }
  ]
}
```
</code></pre></div></div> <p>The rendered output shows a clean and simple bar chart with a hover effect：</p> <pre><code class="language-vega_lite">{
  "$schema": "https://vega.github.io/schema/vega/v5.json",
  "width": 400,
  "height": 200,
  "padding": 5,

  "data": [
    {
      "name": "table",
      "values": [
        {"category": "A", "value": 28},
        {"category": "B", "value": 55},
        {"category": "C", "value": 43},
        {"category": "D", "value": 91},
        {"category": "E", "value": 81},
        {"category": "F", "value": 53},
        {"category": "G", "value": 19},
        {"category": "H", "value": 87}
      ]
    }
  ],

  "scales": [
    {
      "name": "xscale",
      "type": "band",
      "domain": {"data": "table", "field": "category"},
      "range": "width",
      "padding": 0.1
    },
    {
      "name": "yscale",
      "type": "linear",
      "domain": {"data": "table", "field": "value"},
      "nice": true,
      "range": "height"
    }
  ],

  "axes": [
    {"orient": "bottom", "scale": "xscale"},
    {"orient": "left", "scale": "yscale"}
  ],

  "marks": [
    {
      "type": "rect",
      "from": {"data": "table"},
      "encode": {
        "enter": {
          "x": {"scale": "xscale", "field": "category"},
          "width": {"scale": "xscale", "band": 0.8},
          "y": {"scale": "yscale", "field": "value"},
          "y2": {"scale": "yscale", "value": 0},
          "fill": {"value": "steelblue"}
        },
        "update": {
          "fillOpacity": {"value": 1}
        },
        "hover": {
          "fill": {"value": "orange"}
        }
      }
    }
  ]
}
</code></pre> <hr/> <h2 id="tikz">TikZ</h2> <p><a href="https://tikz.net/">TikZ</a> is a powerful LaTeX-based drawing tool powered by <a href="https://tikzjax.com/">TikZJax</a>. You can easily port TikZ drawings from papers, posters, and notes. For example, we can use the following code to illustrate Euler’s formula $ e^{i \theta} = \cos \theta + i \sin \theta $:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/tikz"</span><span class="nt">&gt;</span>
<span class="se">\b</span>egin{tikzpicture}
    <span class="se">\f</span>illdraw[fill=cyan!10, draw=blue, thick] (0,0) circle (2cm);<span class="sb">

    \draw[-&gt;, thick] (-2.5,0) -- (2.5,0) node[right] {Re};
    \draw[-&gt;, thick] (0,-2.5) -- (0,2.5) node[above] {Im};

    \draw[-&gt;, thick, color=purple] (0,0) -- (1.5,1.5);
    \node[color=purple] at (1.1, 1.7) {$e^{i\theta}$};

    \draw[thick] (0.7,0) arc (0:45:0.7);
    \node at (0.9, 0.3) {$\theta$};

    \draw[dashed, color=gray] (1.5,1.5) -- (1.5,0) node[below, black] {$\cos \theta$};
    \draw[dashed, color=gray] (1.5,1.5) -- (0,1.5) node[left, black] {$\sin \theta$};
    \node at (2.2, 0) [below] {1}; 
    \node at (0, 2.2) [left] {$i$}; 
    \node at (1.5,1.5) [above right, color=blue] {$(\cos \theta \, \sin \theta)$}; 
</span><span class="se">\e</span>nd{tikzpicture}
<span class="nt">&lt;/script&gt;</span>
</code></pre></div></div> <p>The rendered output is shown below, displayed as a vector graphic：</p> <script type="text/tikz">
\begin{tikzpicture}
    \filldraw[fill=cyan!10, draw=blue, thick] (0,0) circle (2cm);

    \draw[->, thick] (-2.5,0) -- (2.5,0) node[right] {Re};
    \draw[->, thick] (0,-2.5) -- (0,2.5) node[above] {Im};

    \draw[->, thick, color=purple] (0,0) -- (1.5,1.5);
    \node[color=purple] at (1.1, 1.7) {$e^{i\theta}$};

    \draw[thick] (0.7,0) arc (0:45:0.7);
    \node at (0.9, 0.3) {$\theta$};

    \draw[dashed, color=gray] (1.5,1.5) -- (1.5,0) node[below, black] {$\cos \theta$};
    \draw[dashed, color=gray] (1.5,1.5) -- (0,1.5) node[left, black] {$\sin \theta$};
    \node at (2.2, 0) [below] {1}; 
    \node at (0, 2.2) [left] {$i$}; 
    \node at (1.5,1.5) [above right, color=blue] {$(\cos \theta \, \sin \theta)$}; 
\end{tikzpicture}
</script> <hr/> <h2 id="typograms">Typograms</h2> <p><a href="https://google.github.io/typograms/">Typograms</a> are a way of combining text and graphics to convey information in a clear and visually engaging manner. Typograms are particularly effective for illustrating simple diagrams, charts, and concept visuals where text and graphics are closely integrated. The following example demonstrates a simple Typogram:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>```typograms
             ___________________
            /                  /|
           /__________________/ |
          |                  |  |
          |     Distill      |  |
          |                  |  |
          |                  | /
          |__________________|/
```
</code></pre></div></div> <p>The rendered output is shown below：</p> <pre><code class="language-typograms">             ___________________
            /                  /|
           /__________________/ |
          |                  |  |
          |     Distill      |  |
          |                  |  |
          |                  | /
          |__________________|/
</code></pre> <hr/> <h2 id="layouts">Layouts</h2> <p>The main text column is referred to as the body. It is the assumed layout of any direct descendants of the <code class="language-plaintext highlighter-rouge">d-article</code> element.</p> <div class="fake-img l-body"> <p>.l-body</p> </div> <p>For images you want to display a little larger, try <code class="language-plaintext highlighter-rouge">.l-page</code>:</p> <div class="fake-img l-page"> <p>.l-page</p> </div> <p>All of these have an outset variant if you want to poke out from the body text a little bit. For instance:</p> <div class="fake-img l-body-outset"> <p>.l-body-outset</p> </div> <div class="fake-img l-page-outset"> <p>.l-page-outset</p> </div> <p>Occasionally you’ll want to use the full browser width. For this, use <code class="language-plaintext highlighter-rouge">.l-screen</code>. You can also inset the element a little from the edge of the browser by using the inset variant.</p> <div class="fake-img l-screen"> <p>.l-screen</p> </div> <div class="fake-img l-screen-inset"> <p>.l-screen-inset</p> </div> <p>The final layout is for marginalia, asides, and footnotes. It does not interrupt the normal flow of <code class="language-plaintext highlighter-rouge">.l-body</code> sized text except on mobile screen sizes.</p> <div class="fake-img l-gutter"> <p>.l-gutter</p> </div> <hr/> <h2 id="other-typography">Other Typography?</h2> <p>Emphasis, aka italics, with <em>asterisks</em> (<code class="language-plaintext highlighter-rouge">*asterisks*</code>) or <em>underscores</em> (<code class="language-plaintext highlighter-rouge">_underscores_</code>).</p> <p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p> <p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p> <p>Strikethrough uses two tildes. <del>Scratch this.</del></p> <ol> <li>First ordered list item</li> <li>Another item ⋅⋅* Unordered sub-list.</li> <li>Actual numbers don’t matter, just that it’s a number ⋅⋅1. Ordered sub-list</li> <li>And another item.</li> </ol> <p>⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we’ll use three here to also align the raw Markdown).</p> <p>⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅ ⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅ ⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p> <ul> <li> <p>Unordered list can use asterisks</p> </li> <li> <p>Or minuses</p> </li> <li> <p>Or pluses</p> </li> </ul> <p><a href="https://www.google.com">I’m an inline-style link</a></p> <p><a href="https://www.google.com" title="Google's Homepage">I’m an inline-style link with title</a></p> <p><a href="https://www.mozilla.org">I’m a reference-style link</a></p> <p><a href="http://slashdot.org">You can use numbers for reference-style link definitions</a></p> <p>Or leave it empty and use the <a href="http://www.reddit.com">link text itself</a>.</p> <p>URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or <a href="http://www.example.com">http://www.example.com</a> and sometimes example.com (but not on Github, for example).</p> <p>Some text to show that the reference links can follow later.</p> <p>Here’s our logo (hover to see the title text):</p> <p>Inline-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 1"/></p> <p>Reference-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 2"/></p> <p>Inline <code class="language-plaintext highlighter-rouge">code</code> has <code class="language-plaintext highlighter-rouge">back-ticks around</code> it.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">JavaScript syntax highlighting</span><span class="dl">"</span><span class="p">;</span>
<span class="nf">alert</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Python syntax highlighting</span><span class="sh">"</span>
<span class="k">print</span> <span class="n">s</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>No language indicated, so no syntax highlighting.
But let's throw in a &lt;b&gt;tag&lt;/b&gt;.
</code></pre></div></div> <p>Colons can be used to align columns.</p> <table> <thead> <tr> <th>Tables</th> <th style="text-align: center">Are</th> <th style="text-align: right">Cool</th> </tr> </thead> <tbody> <tr> <td>col 3 is</td> <td style="text-align: center">right-aligned</td> <td style="text-align: right">$1600</td> </tr> <tr> <td>col 2 is</td> <td style="text-align: center">centered</td> <td style="text-align: right">$12</td> </tr> <tr> <td>zebra stripes</td> <td style="text-align: center">are neat</td> <td style="text-align: right">$1</td> </tr> </tbody> </table> <p>There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don’t need to make the raw Markdown line up prettily. You can also use inline Markdown.</p> <table> <thead> <tr> <th>Markdown</th> <th>Less</th> <th>Pretty</th> </tr> </thead> <tbody> <tr> <td><em>Still</em></td> <td><code class="language-plaintext highlighter-rouge">renders</code></td> <td><strong>nicely</strong></td> </tr> <tr> <td>1</td> <td>2</td> <td>3</td> </tr> </tbody> </table> <blockquote> <p>Blockquotes are very handy in email to emulate reply text. This line is part of the same quote.</p> </blockquote> <p>Quote break.</p> <blockquote> <p>This is a very long line that will still be quoted properly when it wraps. Oh boy let’s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can <em>put</em> <strong>Markdown</strong> into a blockquote.</p> </blockquote> <p>Here’s a line for us to start with.</p> <p>This line is separated from the one above by two newlines, so it will be a <em>separate paragraph</em>.</p> <p>This line is also a separate paragraph, but… This line is only separated by a single newline, so it’s a separate line in the <em>same paragraph</em>.</p>]]></content><author><name>Albert Einstein</name></author><category term="distill"/><category term="formatting"/><summary type="html"><![CDATA[an example of a distill-style blog post and main elements]]></summary></entry></feed>